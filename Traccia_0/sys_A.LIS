00008000                                     1     ORG $8000
00008000                                     2  
00008000                                     3  ***************  Definizione di macro
00008000  =00000003                          4  MEX_CHAR	EQU 3     *  Numero di caratteri che compongono un messaggio
00008000  =00000002                          5  N_ITER	EQU 2	   *  Numero di iterazioni di esecuzione 
00008000  =00000002                          6  N_MEX_PER_ITER EQU 2 * Numero di messaggi per iterazione
00008000                                     7  
00008000                                     8  * Registri di controllo della PIA.
00008000  =00002004                          9  PIADA	EQU    $2004	
00008000  =00002005                         10  PIACA	EQU    $2005	
00008000                                    11  
00008000                                    12  
00008000                                    13  ***************** Definizioni di variabili
00008000                                    14  * Un buffer di Ricezione
00008000                                    15  BUFF_B		DS.W 64 * Dimensione del Buffer di B 
00008080  0000                              16  CTR_CH_B   	DC.W 0	* Contatore di caratteri ricevuti da B
00008082  0000                              17  TOT_B DC.W 0	* Contatore del numero totale di bytes ricevuti da B.
00008084  0000                              18  CTR_MEX_B 		DC.W 0 	* Contatore dei messaggi ricevuti da B durante una iterazione
00008086  0000                              19  END_B         	DC.W 0		* Variabile che indica che il sistema da B ha terminato la ricezione dei messaggi in una iterazione. 
00008088  0000                              20  K               DC.W 0      * Contatore delle iterazioni.
0000808A                                    21  
0000808A                                    22  
0000808A                                    23  
00008200                                    24  	ORG	$8200
00008200                                    25  
00008200  4EB9 00008220                     26  INIT	JSR	INIZIALIZZA
00008206                                    27  
00008206  40C1                              28  	MOVE.W	SR,D1
00008208  0241 D8FF                         29  	ANDI.W	#$D8FF,D1
0000820C  46C1                              30  	MOVE.W	D1,SR
0000820E                                    31  
0000820E                                    32  
0000820E  3A39 00008086                     33  LOOP	MOVE.W END_B,D5
00008214  3E39 00008088                     34  	MOVE.W K,D7
0000821A  4EF9 0000820E                     35  	JMP	LOOP
00008220                                    36  
00008220                                    37  
00008220                                    38  
00008220                                    39  INIZIALIZZA
00008220  11FC 0000 2005                    40  	MOVE.B	#0,PIACA
00008226  11FC 0000 2004                    41  	MOVE.B	#0,PIADA
0000822C  11FC 0025 2005                    42  	MOVE.B	#%00100101,PIACA
00008232  4E75                              43  	RTS
00008234                                    44  
00008234                                    45  ** Nota: Ogni ISR legge caratteri finch  non completa i messaggi di una iterazione, quando lo fa si sospende, ossia esce senza leggere. 
00008234                                    46  ** Pseudo:
00008234                                    47  ** 	if(end_B == 1)
00008234                                    48  **		RTE
00008234                                    49  ** 	buff[total_ch_B] = PIADA
00008234                                    50  ** 	total_ch_B++	* Incrementa il valore totale dei caratteri ricevuti da B
00008234                                    51  ** 	curr_ch_B++ 	* Incrementa il contatore dei caratteri del mess corrente
00008234                                    52  **	if(curr_ch_B == 3){
00008234                                    53  **		curr_ch_B = 0
00008234                                    54  **		cnt_mex_B++
00008234                                    55  **		if(cnt_mex_B == 2){
00008234                                    56  **			end_B = 1 
00008234                                    57  **			if(end_C == 1){
00008234                                    58  **				k++
00008234                                    59  **				if(k == n_iter){
00008234                                    60  **					RTE
00008234                                    61  **				}
00008234                                    62  **				else{
00008234                                    63  **					end_B = 0
00008234                                    64  **					end_C = 0
00008234                                    65  **					cnt_mex_B = 0
00008234                                    66  **					if(C_susp == 1){ * Se C si era sospeso perch  aveva completato i suoi messaggi, leggi il carattere sbloccandolo
00008234                                    67  **						total_ch_C ++
00008234                                    68  **						curr_ch_C = 1
00008234                                    69  **						buff_C[total_ch_C] = PIADA2		
00008234                                    70  **						RTE
00008234                                    71  **					}
00008234                                    72  **				}
00008234                                    73  **			}
00008234                                    74  **		}
00008234                                    75  **	}
00008234                                    76  **	RTE
00008234                                    77  		
00008700                                    78       ORG $8700
00008700                                    79  
00008700  0C79 0001 00008086                80  IB     			CMP.W 	#1,END_B 					* Se B ha terminato i suoi messaggi per iterazione se ne esce (sospendendosi).
00008708  6700 00BA                         81  			BEQ    		IB_RTE
0000870C  48E7 E080                         82  			MOVEM.L 	D0-D2/A0,-(SP)
00008710  3039 00008082                     83  			MOVE.W 	TOT_B,D0
00008716  3239 00008080                     84  			MOVE.W 	CTR_CH_B,D1
0000871C  207C 00008000                     85  			MOVEA.L 	#BUFF_B,A0
00008722  11B8 2004 0000                    86  			MOVE.B 	PIADA,(A0,D0) 			* Salva il carattere
00008728  5240                              87  			ADDI.W 	#1,D0                   	* Incrementa di 1 il numero di caratteri TOTALI RICEVUTI
0000872A  33C0 00008082                     88  			MOVE.W 	D0,TOT_B		* Aggiorna la var in memoria
00008730  5241                              89  			ADDI.W 	#1,D1                   	* Incrementa di 1 il numero di caratteri del messaggio corrente
00008732  33C1 00008080                     90  			MOVE.W 	D1,CTR_CH_B			* Aggiorna la variabile in memoria
00008738  B27C 0003                         91  			CMP.W 	#MEX_CHAR,D1
0000873C  6600 0082                         92  			BNE 	EIB
00008740  33FC 0000 00008080                93  			MOVE.W  	#0,CTR_CH_B
00008748  3239 00008084                     94  			MOVE.W	CTR_MEX_B,D1
0000874E  5241                              95  			ADDI.W 	#1,D1
00008750  33C1 00008084                     96  			MOVE.W 	D1,CTR_MEX_B
00008756  B27C 0002                         97  			CMP.W  	 #N_MEX_PER_ITER,D1
0000875A  6600 0064                         98  			BNE		EIB
0000875E  33FC 0001 00008086                99  			MOVE.W 	#1,END_B
00008766  6600 0058                        100  			BNE 		EIB 			
0000876A  3439 00008088                    101  			MOVE.W 	K,D2
00008770  5242                             102  			ADDI.W	#1,D2
00008772  33C2 00008088                    103  			MOVE.W	D2,K
00008778  B47C 0002                        104  			CMP.W	#N_ITER,D2
0000877C  6700 0042                        105  			BEQ		EIB			
00008780  33FC 0000 00008086               106  			MOVE.W	#0,END_B
00008788  33FC 0000 00008084               107  			MOVE.W	#0,CTR_MEX_B
00008790                                   108  			* Recupera il messaggio di C se si era bloccato.
00008790  1038 2005                        109  			MOVE.B PIACA,D0 	* Per prima cosa, si verifica se C   sospeso utilizzando il settimo bit del registro di controllo
00008794  0200 0080                        110  			ANDI.B  #$80,D0
00008798  6700 0026                        111  			BEQ		EIB
0000879C                                   112  			* Aggiorna i contatori e poi leggi il caratteri
0000879C  3039 00008082                    113  			MOVE.W 	TOT_B,D0
000087A2  3200                             114  			MOVE.W	D0,D1
000087A4  5241                             115  			ADDI.W	#1,D1
000087A6  33C1 00008082                    116  			MOVE.W	D1,TOT_B
000087AC  33FC 0001 00008080               117  			MOVE.W 	#1,CTR_CH_B
000087B4  207C 00008000                    118  			MOVEA.L 	#BUFF_B,A0
000087BA  11B8 2004 0000                   119  			MOVE.B	PIADA,(A0,D0) * A questo punto me ne esco 
000087C0  4CDF 0107                        120  EIB			MOVEM.L (SP)+,D0-D2/A0
000087C4  4E73                             121  IB_RTE		RTE 
000087C6                                   122  
000087C6                                   123  
000087C6                                   124  		END INIT

No errors detected
No warnings generated
